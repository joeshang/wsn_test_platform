OINT下位机(ARM)应用程序Board Agent
==================================

## 1. 功能（Features)

Board Agent负责

1. 接收OINT上位机发送的控制命令，通过SPI与FPGA板通信，并从FPGA板读取采集上来的数据，发送回OINT上位机。
2. 接收OINT上位机发送的重编程命令与二进制文件，通过串口对节点进行重编程。
3. 将采集来的数据发送给ARM板上的Qt程序，以供展示。

## 2. 设计（Design）

### 2.1 设计思想（Guideline）

1. 面向对象设计：分层+模块化，划分出清晰的接口。
2. 单元测试：为了降低重构的风险，每个模块要有对应的单元测试来验证，要学会打桩。
3. 好的编程风格：原有代码真是不能看，因此重构的代码必须做个好榜样。

### 2.2 结构（Structure）

#### Main

最顶层模块，主要负责读取启动参数，监听数据传输端口与重编程端口。

- 如果启动参数比较复杂，可以新建一个专门的模块处理。总之，Main所做工作越抽象越好，因为是顶层模块！
- 由于数据传输跟重编程是独立的两个任务，因此用select等待accept返回，一旦建立连接，就将connect的socket作为参数传入数据传输模块与重编程模块，后面的工作就交给这两个模块完成。

#### PacketTransfer

数据传输模块，主要负责接收上位机发送的命令，处理过之后发送给FPGA板，并接收FPGA板返回的响应，封装后发回给上位机。

- 由于速度不一致（命令快，响应慢），因此不能是request-response的流程，需要将二者划分成不同的流程异步处理。使用select区分接收处理命令与接收处理响应的流程。
- 由于命令跟响应都需要拆包重组（这也是为什么成为PacketTransfer的原因），为了方便处理，分别建立`Command`与`Response`结构体来表示命令与响应在PacketTransfer模块中表示形式。
- 将拆包处理、重组、发送分散到不同函数中，每一个都可以单独测试。

#### Reprogrammer

重编程模块，主要负责接收处理重编程命令，接收Hex文件，解析后对节点进行重编程。

- 将接收命令、接收Hex文件、解析Hex文件、写入节点都用带返回值函数表示后，在顶层的process函数中处理，对于不同的返回值，调用重编程结果反馈函数向上位机返回结果。
- 实现解析Hex文件的解析器模块，将解析工作交给解析器模块去完成，重编程模块不关心解析细节，解析器也可以单独测试。
- 由于存在两种Zigbee节点，二者的重编程指令并不相同，原来的代码是用宏控制，每次更换节点测试都要重新编译上传到ARM板，非常不方便。为了灵活性，重构的设计是基于接口编程：根据重编程操作的特点，抽象出setup、doing、end三个接口函数，形成重编程操作接口类，两种节点分别根据自身情况实现接口。通过上位机发送的命令指定初始化哪个具体的重编程操作类，这样在更改节点测试时完全不需要修改整个下位机源码。

#### GatherBoard

PacketTransfer所需模块，负责封装与FPGA板的通信细节（包括GPIO跟SPI），向上提供简洁的接口。由于FPGA板主要负责收集节点数据，因此起名为GatherBoard。

#### Pcap

PacketTransfer所需模块，负责生成WireSharp可以打开的pcap文件，在module文件夹下。

#### HexParser

Reprogrammer所需模块，负责解析Hex文件，在module文件夹下。

#### Serial

Reprogrammer所需模块，负责串口通信，在module文件夹下。

